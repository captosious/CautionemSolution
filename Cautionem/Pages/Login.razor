@page "/Login"

<div class="container h-100">
    <div class="d-flex justify-content-center align-middle h-100">
        <div class="user_card">
            <div class="d-flex justify-content-center">
                <form>
                    <div class="input-group mb-3">
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                        </div>
                        <input type="text" name="" class="form-control input_user" value="" placeholder="@SharedLocalizer["username"]">
                    </div>
                    <div class="input-group mb-2">
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fas fa-key"></i></span>
                        </div>
                        <input type="password" name="" class="form-control input_pass" value="" placeholder="@SharedLocalizer["password"]">
                    </div>
                    <div class="d-flex justify-content-center mt-3 login_container">
                        <button type="button" name="button" class="btn login_btn">@SharedLocalizer["login"]</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code{




    private async void LogInMe()
    {
        int return_code;

        myBlocker.Show();
        Task<int> loginTask = AccessService.LogInAsync(UserName, Password);

        return_code = await loginTask;
        switch (loginTask.Result)
        {
            case 0:
                CompleteUserName = AccessService.MyLogin.Name + " " + AccessService.MyLogin.FamilyName;

                if (AccessService.MyLogin.Image is null)
                {
                    UserPhoto = "";
                }
                else
                {
                    UserPhoto = "data:image/jpg;base64," + Convert.ToBase64String(AccessService.MyLogin.Image, 0, AccessService.MyLogin.Image.Length);
                }
                toastService.ShowSuccess(SharedLocalizer["LOGIN_SUCCESS"], SharedLocalizer["LOGIN_TITLE"]);
                break;
            case 1:
                CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["LOGIN_CREDENTIALS_ERROR"], SharedLocalizer["LOGIN_TITLE_ERROR"]);
                break;
            case 2:
                CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["CONNECTION_ERROR"], SharedLocalizer["TITLE_CONNECTION_ERROR"]);
                break;
        }
        StateHasChanged();
        myBlocker.Hide();
    }

    private async void LogOutMe()
    {
        await AccessService.LogOut();
        Navigation.NavigateTo("/");
    }
}
