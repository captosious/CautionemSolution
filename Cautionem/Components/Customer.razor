@page "/Customer"
@using Cautionem.Models

@inject Cautionem.Data.CustomerService customerService
@inject IStringLocalizer<Customer> Localizer

    <div>
        <h2>@Localizer["customers"]</h2>
        

        <DataGrid TItem="Cautionem.Models.Customer" Data="@customers" ShowPager="true" PageSize="15" Narrow="true">
            <DataGridCommandColumn TItem="Cautionem.Models.Customer" />
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.FiscalId)" Caption="Fiscal ID"/>
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.Name)" Caption="Name" />
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.Address)" Caption="Address" />
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.Email)" Caption="EMail" />
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.Town)" Caption="Town"/>
            <DataGridColumn TItem="Cautionem.Models.Customer" Field="@nameof(Cautionem.Models.Customer.Zip)" Caption="Zip" />
        </DataGrid>

    </div>



@code {

    private Cautionem.Models.Customer customerEdit { get; set; }
    private IEnumerable<Cautionem.Models.Customer> customers = new List<Cautionem.Models.Customer>();

    //Modal
    private Modal modalCustomer;
    private bool IsNew = false;

    protected override async Task OnInitializedAsync()
    {
        customers = await customerService.GetAll(1);
    }

    private void CustomerEdit(Cautionem.Models.Customer customer)
    {
        this.customerEdit = customer;
        modalCustomer.Show();
    }

    private async void SaveCustomer()
    {
        myBlocker.Show();
        await customerService.Save(customerEdit);
        myBlocker.Hide();
    }

    // Modal
    private void CloseModal()
    {
        modalCustomer.Hide();
    }

    private void OpenModal()
    {
        modalCustomer.Show();
    }

    private void OnClosing(CancelEventArgs e)
    {
        customerService.Detach(customerEdit);
        e.Cancel = false;
        IsNew = false;
        StateHasChanged();
    }
}
