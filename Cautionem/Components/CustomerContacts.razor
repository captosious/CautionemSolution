@page "/CustomerContacts"
@using Cautionem.Models
@using System.Linq

@inject Cautionem.Data.CustomerContactService customerContactService
@inject IStringLocalizer<Components.Customer> Localizer

<h2>@Localizer["customercontacts"]</h2>
<div>

    <DataGrid TItem="Cautionem.Models.CustomerContact" Data="@customersContacts" @bind-SelectedRow="@customerContactEdit" RowClicked="@RowClicking" Editable="false" Filterable="true" Sortable="true" ShowPager="true" PageSize="10" Narrow="true" Hoverable="true">
        <DataGridCommandColumn TItem="Cautionem.Models.CustomerContact" />

        <DataGridColumn TItem="Cautionem.Models.CustomerContact" Field="@nameof(Cautionem.Models.CustomerContact.Id)" Caption="@Localizer["fiscalid"]" TextAlignment="TextAlignment.Left" />
        <DataGridColumn TItem="Cautionem.Models.CustomerContact" Field="@nameof(Cautionem.Models.CustomerContact.Name)" Caption="@Localizer["name"]" TextAlignment="TextAlignment.Justified" />
        <DataGridColumn TItem="Cautionem.Models.CustomerContact" Field="@nameof(Cautionem.Models.CustomerContact.Address)" Caption="@Localizer["address"]" TextAlignment="TextAlignment.Justified" />
        <DataGridColumn TItem="Cautionem.Models.CustomerContact" Field="@nameof(Cautionem.Models.CustomerContact.Town)" Caption="@Localizer["town"]" TextAlignment="TextAlignment.Justified" />
        <DataGridColumn TItem="Cautionem.Models.CustomerContact" Field="@nameof(Cautionem.Models.CustomerContact.Zip)" Caption="@Localizer["zip"]" TextAlignment="TextAlignment.Left" />
    </DataGrid>
</div>

@if (ShowDetail)
{
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["name"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Name" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["address"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Address" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["town"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Town" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["zip"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Zip" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["phone"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Phone" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["email"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.Email" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    <div>
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel Class="addonlabel_style">@Localizer["country"]</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@customerContactEdit.CountryId" />
                </Addon>
            </Addon>
        </Addons>
    </div>
    
    <button class="btn btn_general btn-warning" @onclick="DeleteCustomerContact">@SharedLocalizer["MSG_DELETE"]</button>
    <button class="btn btn_general btn-success" @onclick="SaveCustomerContact">@SharedLocalizer["MSG_SAVE"]</button>
}
<button class="btn btn_general btn-danger" @onclick="NewCustomerContact">@SharedLocalizer["MSG_ADD"]</button>

@code{
    [Parameter]
    public Models.Customer parCustomer { get; set; }

    private Cautionem.Models.CustomerContact customerContactEdit = new Cautionem.Models.CustomerContact();
    private IEnumerable<Cautionem.Models.CustomerContact> customersContacts = new List<Cautionem.Models.CustomerContact>();

    private bool IsNew = false;
    private bool ShowDetail = false;

    protected override async Task OnInitializedAsync()
    {
        myBlocker.Show();
        customersContacts = await customerContactService.GetAll(parCustomer);
        myBlocker.Hide();
    }

    protected void RowClicking()
    {
        //modalCustomer.Show();
        ShowDetail = true;
        StateHasChanged();
    }

    protected void NewCustomerContact()
    {
        customerContactEdit = new CustomerContact();
        customerContactEdit.CompanyId = 1;
        customerContactEdit.CustomerId = int.Parse(parCustomer.CustomerId.ToString());
        ShowDetail = true;
        IsNew = true;
        StateHasChanged();
    }

    protected void DeleteCustomerContact()
    {

    }

    protected async void SaveCustomerContact()
    {
        if (IsNew)
        {
            await customerContactService.Add(customerContactEdit);
        }   
        else
        {
            await customerContactService.Save(customerContactEdit);
        }
        IsNew = false;
    }
}