
@inject Cautionem.Data.AccessService accessService
@inject NavigationManager Navigation

<!-- Topbar -->
<nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
    <ul class="navbar-nav ml-auto">
        <!-- Nav Item - User Information -->
        <li class="nav-item dropdown no-arrow">
            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="mr-2 d-none d-lg-inline text-gray-600 small">
                    <AuthorizeView>
                        <Authorized>
                            Douglas McGee
                        </Authorized>
                        <NotAuthorized>
                            LogIn
                        </NotAuthorized>
                    </AuthorizeView>
                </span>
                @*<img class="img-profile rounded-circle" src="img/undraw_profile.svg">*@
            </a>
            <AuthorizeView>
                <Authorized>
                    <!-- Dropdown - User Information -->
                    <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                        <a class="dropdown-item" href="#">
                            <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                            Profile
                        </a>
                        <a class="dropdown-item" href="#">
                            <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                            Settings
                        </a>
                        <a class="dropdown-item" href="#">
                            <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                            Activity Log
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                            <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                            Logout
                        </a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                        <div class="input-group mb-3">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                            </div>
                            <input type="text" name="usernametext" @bind="Username" class="form-control input_user" placeholder="@SharedLocalizer["username"]">
                        </div>
                        <div class="input-group mb-2">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-key"></i></span>
                            </div>
                            <input type="password" name="passwordtext" @bind="Password" class="form-control input_pass" placeholder="@SharedLocalizer["password"]" />
                        </div>
                        <div class="d-flex justify-content-center mt-3 login_container">
                            <button type="button" name="button" class="btn login_btn" @onclick=LogInMe>@SharedLocalizer["login"]</button>
                        </div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </li>
    </ul>
</nav>

@code {

    private string Username { get; set; }
    private string Password { get; set; }
    private string UserPhoto { get; set; }

    private async void LogInMe()
    {
        int return_code;

        myBlocker.Show();
        Task<int> loginTask = accessService.LogInAsync(Username, Password);

        return_code = await loginTask;
        switch (loginTask.Result)
        {
            case 0:
                @*if (accessService.MyLogin.Image is null)
                    {
                        //UserPhoto = "";
                    }
                    else
                    {
                        //UserPhoto = "data:image/jpg;base64," + Convert.ToBase64String(accessService.MyLogin.Image, 0, accessService.MyLogin.Image.Length);
                    }*@
                toastService.ShowSuccess(SharedLocalizer["LOGIN_SUCCESS"], SharedLocalizer["LOGIN_TITLE"]);
                break;
            case 1:
                //CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["LOGIN_CREDENTIALS_ERROR"], SharedLocalizer["LOGIN_TITLE_ERROR"]);
                break;
            case 2:
                //CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["CONNECTION_ERROR"], SharedLocalizer["TITLE_CONNECTION_ERROR"]);
                break;
            case 3:
                //CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["LOGIN_CREDENTIALS_ERROR"], SharedLocalizer["LOGIN_TITLE_ERROR"]);
                break;
        }
        StateHasChanged();
        myBlocker.Hide();
    }

    private async void LogOutMe()
    {
        await accessService.LogOut();
        Navigation.NavigateTo("/");
    }

}

